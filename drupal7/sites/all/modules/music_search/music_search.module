<?php 
// $Id$

module_load_include('inc', 'airplay_base', 'airplay_base_constants');  
module_load_include('inc', 'music_search', 'music_search_album');  
module_load_include('inc', 'music_search', 'music_search_song');  
module_load_include('inc', 'music_search', 'music_search_artist');  
module_load_include('inc', 'music_search', 'music_search_search');  
module_load_include('inc', 'music_search', 'music_search_test');  
module_load_include('inc', 'music_search', 'music_search_small_form');  
module_load_include('inc', 'music_search', 'music_search_large_form');  
////drupal_add_js('sites/all/modules/music_search/music_search.js', 'module' );
////drupal_add_js('misc/autocomplete.js', 'module' );





/**
* Implementation of hook_block
* @param string $op one of "list", "view", "save" and "configure"
* @param integer $delta code to identify the block
* @param array $edit only for "save" operation
**/
function music_search_block($op = 'list', $delta = 0, $edit = array()) 
{ 
	if ($op == "list") {
		// Generate listing of blocks from this module, for the admin/block page
		$block = array();
		$block[0]["info"] = t('Music Search');
		return $block;
	  }
	else if ($op == 'view') {
 		$sBlockContent .= render( drupal_get_form('apms_small_form' ) );
		
		// set up the block
		$block['subject'] = 'Music Search';
		$block['content'] = $sBlockContent;
		
		return $block;
	}
} // function music_search_block




function music_search_admin() 
{
	$form = array();
	
	$form['music_search_maxdisp'] = array(
		'#type' => 'textfield',
		'#title' => t('Maximum number of links'),
		'#default_value' => variable_get('music_search_maxdisp', 3),
		'#size' => 2,
		'#maxlength' => 2,
		'#description' => t("The maximum number of links to display in the block."),
		'#required' => TRUE,
	);
	
	return system_settings_form($form);
}

function music_search_menu() 
{
	$items = array();
	
	$items['admin/settings/music-search'] = array(
		'title' => 'Music Search module settings',
		'description' => 'Setup display settings for Music Search pages',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('music_search_admin'),
		'access arguments' => array('access administration pages'),
		'type' => MENU_NORMAL_ITEM,
	);
	$items['music-search'] = array(
		'title' => '',
		'page callback' => 'music_search_search',
		'access arguments' => array('access music_search content'),
		'type' => MENU_CALLBACK
	);
	$items['music-search/results'] = array(
		'title' => '',
		'page callback' => 'ap_music_search_display_results',
		'access arguments' => array('access music_search content'),
		'type' => MENU_CALLBACK
	);
	$items['music-search/autocomplete_all'] = array(
		'title' => 'music-search autocomplete_all',
		'page callback' => 'ap_music_search_autocomplete_all',
		'access arguments' => array('access music_search content'),
		'type' => MENU_CALLBACK
	);
	$items['music-search/autocomplete_title'] = array(
		'title' => 'music-search autocomplete_title',
		'page callback' => 'ap_music_search_autocomplete_title',
		'access arguments' => array('access music_search content'),
		'type' => MENU_CALLBACK
	);
	$items['music-search/autocomplete_artist'] = array(
		'title' => 'music-search autocomplete_artist',
		'page callback' => 'ap_music_search_autocomplete_artist',
		'access arguments' => array('access music_search content'),
		'type' => MENU_CALLBACK
	);
	$items['music-search/autocomplete_album'] = array(
		'title' => 'music-search autocomplete_album',
		'page callback' => 'ap_music_search_autocomplete_album',
		'access arguments' => array('access music_search content'),
		'type' => MENU_CALLBACK
	);
	$items['music-search/autocomplete_song'] = array(
		'title' => 'music-search autocomplete_song',
		'page callback' => 'ap_music_search_autocomplete_song',
		'access arguments' => array('access music_search content'),
		'type' => MENU_CALLBACK
	);
	$items['apms_autocomplete_set_search_for'] = array(
		'title' => '',
		'page callback' => 'apms_autocomplete_set_search_for',
		'access arguments' => array('access artist content'),
		'type' => MENU_CALLBACK
	);
	
	$items['music-search-test'] = array(
		'title' => 'Music Search Test',
		'page callback' => 'music_search_test',
		'access arguments' => array('access music_search test'),
		'type' => MENU_CALLBACK
	);
	$items['multistepform'] = array(
		'title' => 'multistepform',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('multistepform_form'),
		'access arguments' => array('access content'),
		'type' => MENU_CALLBACK,
	);
	return $items;
}

function music_search_admin_validate($form, &$form_state) {
	$maxdisp = $form_state['values']['music_search_maxdisp'];
	if (!is_numeric($maxdisp)) {
		form_set_error('music_search_maxdisp', t('You must enter an integer for the maximum number of links.'));
	}
	else if ($maxdisp <= 0) {
		form_set_error('music_search_maxdisp', t('Maximum number of links must be positive.'));
	}
}

/**
* Valid permissions for this module
* @return array An array of valid permissions for the music_search module
*/
function music_search_perm() {
	return array('access music_search content', 'access music_search test');
} // function music_search_perm()

function music_search_permission() {
  return array(
    'access music_search content' => array(
      'title' => t('Acces permissions for music_search'),
    ),
  );
}

/**
* Display help and module information
* @param path which path of the site we're displaying help
* @param arg array that holds the current path as would be returned from arg() function
* @return help text for the path
*/
function music_search_help($path, $arg) {
	$output = '';  //declare your output variable
	switch ($path) {
		case "admin/help#music-search":
		$output = '<p>'.  t("For searching in the music database") .'</p>';
		break;
	}
	return $output;
} // function music_search_help


